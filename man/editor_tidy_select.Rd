% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyselect-helpers.R
\name{editor_tidy_select}
\alias{editor_tidy_select}
\alias{line_matches}
\alias{expr_defines}
\alias{expr_calls}
\alias{in_function}
\title{{editor} selection helpers}
\usage{
line_matches(code, n = NULL)

expr_defines(var, n = NULL)

expr_calls(fun, n = NULL)

in_function(fun, selection, n = NULL)
}
\arguments{
\item{code, var, fun}{Target to match exactly, or pattern such as returned by \code{stringr::regex()}
or other \link[stringr:modifiers]{stringr modifiers}.}

\item{n}{index of the match to consider. By default all, to choose the last use \code{Inf}.}
}
\value{
An integer vector
}
\description{
These are to be used in \code{selection}, \code{before} or \code{after} arguments of the
\link[=edit-file]{editing functions}, or in \code{in_function()} described below.
They return the indexes of the matching lines in the file.
\itemize{
\item \code{line_matches()} matches lines of code and return stheir indices
\item \code{expr_defines()} matches a variables being defined and returns the indices of the
lines spanned by the definitions
\item \code{expr_calls()} matches a function being called at the top level and returns the indices of the
lines spanned by the call
\item \code{in_function()} is used to restrict the scope of a selection to a function definition,
it has a \code{selection} argument thst might receive a line numbers or calls to the above
functions. its \code{fun} and \code{n} arguments are themselves passed internally to \code{expr_defines()}
to locate the function definition.
}

When used with \verb{edit_*()}. functions (the only place where these should be used),
these functions and the stringr helpers \code{boundary()}, \code{coll()}, \code{fixed()} and \code{regex()}
can be use without attaching the package or using the \code{pkg::fun()} notation.
}
